/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labaims;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ncoba
 */
public class LabAims extends javax.swing.JFrame {
    String 
        name = "annonymous",
        enemyDodgeColor, 
            
        pattern = "YYYYMMddHHmm",
        date,
            
        enemyLMBColor,
        enemyMMBColor,
        enemyRMBColor,
            
        content = "",
        tmp = "",
    
        path;
    
    int
        deduct_dodgeable = 50,
        deduct_clickable = 200,
            
        duration=30,
            
        scoreAtCurrent = 0, 
        scoreAtHighest = 0,
            
        xAxis_clickableA, 
        yAxis_clickableA,
        random_clickableA,
            
        xAxis_dodgeableA, 
        yAxis_dodgeableA,
        speed_dodgeableA,
        random_dodgeableA,
            
        xAxis_dodgeableB, 
        yAxis_dodgeableB,
        speed_dodgeableB,
        random_dodgeableB,
            
        xAxis_dodgeableC, 
        yAxis_dodgeableC,
        speed_dodgeableC,
        random_dodgeableC,
            
        xAxis_dodgeableD, 
        yAxis_dodgeableD,
        speed_dodgeableD,
        random_dodgeableD;
    
    boolean 
        play = true, 
        start = false,
        stateA = true;
    
    Scanner 
        read;
    
    BufferedWriter 
        write;
    
    Timer 
        timerA, 
        timerB;
    
    SimpleDateFormat 
        simpleDateFormat = new SimpleDateFormat(pattern);
    
    Path 
        currentRelativePath = Paths.get("");
    
    File 
        directory = new File(path = currentRelativePath.toAbsolutePath().toString()+"/bin/"),
            
        scoreboardFile = new File(path+"scoreboard.txt"),
            
        cosmetic = new File(path+"cosmetic.txt");
    
    String[] 
        scanned;
    
    Object[][] 
        datasetA;
    
    Object[] 
        column;
    
    Object 
        A, 
        B;
    
    Pattern 
        p = Pattern.compile("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
    
    Matcher 
        m;
    
    Color
        enemyLMB = Color.decode(enemyLMBColor = "#FF0000"),
        enemyMMB = Color.decode(enemyMMBColor = "#00FFFF"),
        enemyRMB = Color.decode(enemyRMBColor = "#FFC0CB"),
        enemyDodge = Color.decode(enemyDodgeColor = "#000000");
    
    DefaultTableModel 
        model = new DefaultTableModel();
    
    JTable 
        table = new JTable(model);
    
    JScrollPane 
        pane = new JScrollPane(table);
    
    
    
    public LabAims() {
        initComponents();
        
        setLayout(null);
        
        directory.mkdirs();
        try {
            cosmetic.createNewFile();
            scoreboardFile.createNewFile();
            read = new Scanner(scoreboardFile);
        } catch (IOException ex) {
        }
        
        column = new Object[]{"score", "player", "data"};
        
        gameReset();
        cosmeticInitialize();
        
        model.setRowCount(0);
        model.setDataVector(datasetA,column);
        
        setTitle("LabAims");
        setSize(400, 400);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clickableA = new javax.swing.JButton();
        scoreAtCurrentLabel = new javax.swing.JLabel();
        scoreAtHighestLabel = new javax.swing.JLabel();
        timerALabel = new javax.swing.JLabel();
        l8 = new javax.swing.JLabel();
        playerNameLabel = new javax.swing.JLabel();
        l5 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        l6 = new javax.swing.JLabel();
        b3 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        l7 = new javax.swing.JLabel();
        dodgeableA = new javax.swing.JLabel();
        l9 = new javax.swing.JLabel();
        dodgeableB = new javax.swing.JLabel();
        dodgeableC = new javax.swing.JLabel();
        dodgeableD = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Game = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        togglePauseGame = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Cosmetic = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        Scoreboard = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(400, 400));

        clickableA.setText("jButton1");
        clickableA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clickableAMousePressed(evt);
            }
        });

        scoreAtCurrentLabel.setText("Current Score:");

        scoreAtHighestLabel.setText("Highest Score:");

        timerALabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerALabel.setText("Time left (seconds): 30");

        l8.setText("player name ->");

        playerNameLabel.setText("\"\"");

        l5.setText("middle-click enemy ->");
        l5.setMaximumSize(new java.awt.Dimension(150, 16));
        l5.setMinimumSize(new java.awt.Dimension(150, 16));
        l5.setPreferredSize(new java.awt.Dimension(150, 16));

        l4.setText("left-click enemy ->");
        l4.setMaximumSize(new java.awt.Dimension(150, 16));
        l4.setMinimumSize(new java.awt.Dimension(150, 16));
        l4.setPreferredSize(new java.awt.Dimension(150, 16));

        l6.setText("right-click enemy ->");
        l6.setMaximumSize(new java.awt.Dimension(150, 16));
        l6.setMinimumSize(new java.awt.Dimension(150, 16));
        l6.setPreferredSize(new java.awt.Dimension(150, 16));

        b3.setFocusable(false);
        b3.setMaximumSize(new java.awt.Dimension(15, 15));
        b3.setMinimumSize(new java.awt.Dimension(15, 15));
        b3.setPreferredSize(new java.awt.Dimension(15, 15));
        b3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b3MousePressed(evt);
            }
        });

        b2.setFocusable(false);
        b2.setMaximumSize(new java.awt.Dimension(15, 15));
        b2.setMinimumSize(new java.awt.Dimension(15, 15));
        b2.setPreferredSize(new java.awt.Dimension(15, 15));
        b2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b2MousePressed(evt);
            }
        });

        b1.setFocusable(false);
        b1.setMaximumSize(new java.awt.Dimension(15, 15));
        b1.setMinimumSize(new java.awt.Dimension(15, 15));
        b1.setPreferredSize(new java.awt.Dimension(15, 15));
        b1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b1MousePressed(evt);
            }
        });
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        l7.setText("dodge enemy ->");
        l7.setMaximumSize(new java.awt.Dimension(150, 16));
        l7.setMinimumSize(new java.awt.Dimension(150, 16));
        l7.setPreferredSize(new java.awt.Dimension(150, 16));

        dodgeableA.setBackground(new java.awt.Color(0, 0, 0));
        dodgeableA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dodgeableA.setPreferredSize(new java.awt.Dimension(100, 20));
        dodgeableA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeableAMouseEntered(evt);
            }
        });

        l9.setBackground(new java.awt.Color(0, 0, 0));
        l9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        l9.setPreferredSize(new java.awt.Dimension(100, 20));

        dodgeableB.setBackground(new java.awt.Color(0, 0, 0));
        dodgeableB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dodgeableB.setPreferredSize(new java.awt.Dimension(100, 20));
        dodgeableB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeableBMouseEntered(evt);
            }
        });

        dodgeableC.setBackground(new java.awt.Color(0, 0, 0));
        dodgeableC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dodgeableC.setPreferredSize(new java.awt.Dimension(100, 20));
        dodgeableC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeableCMouseEntered(evt);
            }
        });

        dodgeableD.setBackground(new java.awt.Color(0, 0, 0));
        dodgeableD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dodgeableD.setPreferredSize(new java.awt.Dimension(100, 20));
        dodgeableD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeableDMouseEntered(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Legend");

        Game.setText("Game");
        Game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GameActionPerformed(evt);
            }
        });

        newGame.setText("New");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStartActionPerformed(evt);
            }
        });
        Game.add(newGame);

        togglePauseGame.setText("Pause/Play");
        togglePauseGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePauseGameActionPerformed(evt);
            }
        });
        Game.add(togglePauseGame);

        jMenuItem3.setText("Reset");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Game.add(jMenuItem3);

        jMenuItem2.setText("See/Hide Legend");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Game.add(jMenuItem2);

        jMenuBar1.add(Game);

        jMenu1.setText("Miscellaneous");

        Cosmetic.setText("Cosmetic");
        Cosmetic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CosmeticActionPerformed(evt);
            }
        });

        jMenuItem4.setText("Set left-click enemy's Color");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem4);

        jMenuItem5.setText("Set middle-click enemy's Color");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem5);

        jMenuItem6.setText("Set right-click-enemy's Color");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem6);

        jMenuItem8.setText("Set player's Name");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem8);

        jMenu1.add(Cosmetic);

        Scoreboard.setText("Scoreboard");
        Scoreboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScoreboardActionPerformed(evt);
            }
        });
        jMenu1.add(Scoreboard);

        jMenuItem1.setText("Restore");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem7.setText("Intro");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timerALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(clickableA, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(l9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 168, Short.MAX_VALUE))
                            .addComponent(playerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scoreAtHighestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scoreAtCurrentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(150, Short.MAX_VALUE)
                    .addComponent(dodgeableA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(150, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(160, Short.MAX_VALUE)
                    .addComponent(dodgeableB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(140, 140, 140)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(170, Short.MAX_VALUE)
                    .addComponent(dodgeableC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(130, 130, 130)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(180, Short.MAX_VALUE)
                    .addComponent(dodgeableD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(120, 120, 120)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scoreAtCurrentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreAtHighestLabel)
                .addGap(38, 38, 38)
                .addComponent(timerALabel)
                .addGap(26, 26, 26)
                .addComponent(clickableA, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(l7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l8)
                            .addComponent(playerNameLabel)))
                    .addComponent(l9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(178, Short.MAX_VALUE)
                    .addComponent(dodgeableA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(178, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(189, Short.MAX_VALUE)
                    .addComponent(dodgeableB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(167, 167, 167)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(199, Short.MAX_VALUE)
                    .addComponent(dodgeableC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(157, 157, 157)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(209, Short.MAX_VALUE)
                    .addComponent(dodgeableD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(147, 147, 147)))
        );

        l6.getAccessibleContext().setAccessibleName("right-click enemies");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void gameInitialize(){
        dodgeableA.setLocation(-50,-50);
        dodgeableB.setLocation(-50,-50);
        dodgeableC.setLocation(-50,-50);
        dodgeableD.setLocation(-50,-50);
        scoreAtCurrent = 0;
        timerALabel.setVisible(true);
        timerALabel.setText("Time left (seconds): "+(duration = 30));
        clickableA.setLocation(xAxis_clickableA = 195, yAxis_clickableA = 135);
        colorRandom();
        enemyClickableState(false);
    }
    private void gameUpdate(){
        scoreboardInitialization();
        if(scoreAtCurrent != 0) scoreAtCurrentLabel.setText("Current Score: "+scoreAtCurrent);
        else scoreAtCurrentLabel.setText("Current Score: ");
        if(scoreAtHighest != 0) scoreAtHighestLabel.setText("Highest Score: "+scoreAtHighest);
        else scoreAtHighestLabel.setText("Highest Score: ");
    }
    private void gameStart(){
        gameInitialize();
        gameUpdate();
        gameGuide(false);
        play = true;
    }
    private void gameGuide(boolean state){
        jLabel1.setVisible(state);
        l4.setVisible(state);
        l5.setVisible(state);
        l6.setVisible(state);
        l7.setVisible(state);
        l8.setVisible(state);
        l9.setVisible(state);

        b1.setVisible(state);
        b2.setVisible(state);
        b3.setVisible(state);

        playerNameLabel.setVisible(state);
    }
    private void gameReset(){
        gameInitialize();
        timerALabel.setVisible(false);
        play = false;
        enemyClickableState(false);
        gameUpdate();
        scoreAtCurrentLabel.setText("Current Score: \" Start A Game \"");
    }
    private void gameOver(){
        try {
            play = false;
            gameGuide(true);
            enemyClickableState(play);
            timerALabel.setText("Times Up!");
            timerA.cancel();
            timerB.cancel();
            
            write = new BufferedWriter(new FileWriter(scoreboardFile, true));
            if(scoreAtCurrent != 0){
                date = simpleDateFormat.format(new Date());
                write.append("\n"+scoreAtCurrent+" "+name+" "+date);
                write.flush();
            }
            gameUpdate();
        } catch (IOException e) {
        }
    }
    private void enemyClickableState(boolean state){
        clickableA.setEnabled(state);
        clickableA.setSelected(state);
        clickableA.setFocusable(state);
    }
    private void gameState(){
        if(play == true){
            play = false;
        }else if(play == false){
            play = true;
        }
    }
    private void cosmeticInitialize(){
        try{
            read = new Scanner(cosmetic);
            if(read.hasNextLine()==false){
                cosmeticReset();
            }else{
                cosmeticUpdate();
            }
        }catch(FileNotFoundException | NumberFormatException e){
            
        }
    }
    private void cosmeticUpdate(){
        try{
            read = new Scanner(cosmetic);
            while (read.hasNextLine()) {
                String currLine = read.nextLine();
                scanned = currLine.split(" ",2);
                if(currLine.contains("lmb ")){
                    enemyLMB = Color.decode(enemyLMBColor = scanned[1]);
                }else if(currLine.contains("mmb ")){
                    enemyMMB = Color.decode(enemyMMBColor = scanned[1]);
                }else if(currLine.contains("rmb ")){
                    enemyRMB = Color.decode(enemyRMBColor = scanned[1]);
                }else if(currLine.contains("dodge ")){
                    enemyDodge = Color.decode(enemyDodgeColor = scanned[1]);
                }else if(currLine.contains("name ")){
                    playerNameLabel.setText(name = scanned[1]);
                }
            }
            b1.setBackground(enemyLMB);
            b2.setBackground(enemyMMB);
            b3.setBackground(enemyRMB);
        }catch(FileNotFoundException | NumberFormatException e){
            
        }
    }
    private void cosmeticReset(){
        try{
            write = new BufferedWriter(new FileWriter(cosmetic)); 
            write.write("lmb "+(enemyLMBColor="#FF0000")+"\nmmb "+(enemyMMBColor="#00FFFF")+"\nrmb "+(enemyRMBColor="#FFC0CB")+"\nname "+(name="annonymous"));
            write.close();
        }catch(IOException e){            
        }
        cosmeticUpdate();
    } 
    private void scoreboardInitialization(){
        model.setRowCount(0);
        scanned = null;
        int x = 0, y = 0;
        try {
            scoreboardFile.createNewFile();
        } catch (IOException ex) {
        }
        try {
            read = new Scanner(scoreboardFile);
            for(x = 0; read.hasNextLine(); x++){
                scanned = read.nextLine().split(" ");
                y = scanned.length;
            }
        } catch (FileNotFoundException e) {
        }
        datasetA = new Object[x][y];
        
        try {
            read = new Scanner(scoreboardFile);
            for(x = 0; read.hasNextLine(); x++){
                try{
                    scanned = read.nextLine().split(" ");
                    for(y = 0; y < scanned.length; y++){
                        datasetA[x][y] = scanned[y];
                    }
                }catch(Exception e){
                    
                }
            }
        } catch (FileNotFoundException e) {
        }
        scoreSort();
    }
    private void scoreSort() {
        Arrays.sort(datasetA, (Object[] a, Object[] b) -> {
            A = a[0];
            if(A.equals("")) A=0;
            B = b[0];
            if(B.equals("")) B=0;
            return Integer.compare(Integer.valueOf(B.toString()), Integer.valueOf(A.toString()));
        });
        try{
            scoreAtHighest = Integer.valueOf(datasetA[0][0].toString());
        }catch(Exception e){
            scoreAtHighest = 0;
        }
    }
    private void scoreboardReset(){
        try{
            write = new BufferedWriter(new FileWriter(scoreboardFile)); 
            write.write("");
            write.flush();
        }catch(IOException e){            
        }
    }
    private void restore(){
        cosmeticReset();
        scoreboardReset();
        gameReset();
    }
    private void colorRandom() {
        random_clickableA = ThreadLocalRandom.current().nextInt(0, 3);  
        switch (random_clickableA) {
            case 0:
                clickableA.setBackground(enemyLMB);
                break;
            case 1:
                clickableA.setBackground(enemyMMB);
                break;
            case 2:
                clickableA.setBackground(enemyRMB);
                break;
            default:
                break;
        }
    }
    private void instantiate_dodgeableA(){
        random_dodgeableA = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeableA == 0||random_dodgeableA == 1){
            yAxis_dodgeableA = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeableA == 0){
                xAxis_dodgeableA = -50;
            }else if(random_dodgeableA == 1){
                xAxis_dodgeableA = 395;
            }
            dodgeableA.setSize(new Dimension(ThreadLocalRandom.current().nextInt(90, 115),ThreadLocalRandom.current().nextInt(15, 30)));
        }else if(random_dodgeableA == 2||random_dodgeableA == 3){
            xAxis_dodgeableA = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeableA == 2){
                yAxis_dodgeableA = -15;
            }else if(random_dodgeableA == 3){
                yAxis_dodgeableA = 340;
            }
            dodgeableA.setSize(new Dimension(ThreadLocalRandom.current().nextInt(15, 30),ThreadLocalRandom.current().nextInt(90, 115)));
        }
        speed_dodgeableA = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeableB(){
        random_dodgeableB = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeableB == 0||random_dodgeableB == 1){
            yAxis_dodgeableB = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeableB == 0){
                xAxis_dodgeableB = -50;
            }else if(random_dodgeableB == 1){
                xAxis_dodgeableB = 395;
            }
            dodgeableB.setSize(new Dimension(ThreadLocalRandom.current().nextInt(90, 115),ThreadLocalRandom.current().nextInt(15, 30)));
        }else if(random_dodgeableB == 2||random_dodgeableB == 3){
            xAxis_dodgeableB = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeableB == 2){
                yAxis_dodgeableB = -15;
            }else if(random_dodgeableB == 3){
                yAxis_dodgeableB = 340;
            }
            dodgeableB.setSize(new Dimension(ThreadLocalRandom.current().nextInt(15, 30),ThreadLocalRandom.current().nextInt(90, 115)));
        }
        speed_dodgeableB = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeableC(){
        random_dodgeableC = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeableC == 0||random_dodgeableC == 1){
            yAxis_dodgeableC = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeableC == 0){
                xAxis_dodgeableC = -50;
            }else if(random_dodgeableC == 1){
                xAxis_dodgeableC = 395;
            }
            dodgeableC.setSize(new Dimension(ThreadLocalRandom.current().nextInt(90, 115),ThreadLocalRandom.current().nextInt(15, 30)));
        }else if(random_dodgeableC == 2||random_dodgeableC == 3){
            xAxis_dodgeableC = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeableC == 2){
                yAxis_dodgeableC = -15;
            }else if(random_dodgeableC == 3){
                yAxis_dodgeableC = 340;
            }
            dodgeableC.setSize(new Dimension(ThreadLocalRandom.current().nextInt(15, 30),ThreadLocalRandom.current().nextInt(90, 115)));
        }
        speed_dodgeableC = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeableD(){
        random_dodgeableD = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeableD == 0||random_dodgeableD == 1){
            yAxis_dodgeableD = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeableD == 0){
                xAxis_dodgeableD = -50;
            }else if(random_dodgeableD == 1){
                xAxis_dodgeableD = 395;
            }
            dodgeableD.setSize(new Dimension(ThreadLocalRandom.current().nextInt(90, 115),ThreadLocalRandom.current().nextInt(15, 30)));
        }else if(random_dodgeableD == 2||random_dodgeableD == 3){
            xAxis_dodgeableD = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeableD == 2){
                yAxis_dodgeableD = -15;
            }else if(random_dodgeableD == 3){
                yAxis_dodgeableD = 340;
            }
            dodgeableD.setSize(new Dimension(ThreadLocalRandom.current().nextInt(15, 30),ThreadLocalRandom.current().nextInt(90, 115)));
        }
        speed_dodgeableD = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void dodge(){
        if(duration <= 25){
            if(dodgeableA.getLocation().x < -50){
                instantiate_dodgeableA();
            }else if(dodgeableA.getLocation().x > 395){
                instantiate_dodgeableA();
            }
            if(dodgeableA.getLocation().y < -15){
                instantiate_dodgeableA();
            }else if(dodgeableA.getLocation().y > 340){
                instantiate_dodgeableA();
            }
            switch (random_dodgeableA) {
                case 0:
                    xAxis_dodgeableA += speed_dodgeableA;
                    break;
                case 1:
                    xAxis_dodgeableA -= speed_dodgeableA;
                    break;
                case 2:
                    yAxis_dodgeableA += speed_dodgeableA;
                    break;
                case 3:
                    yAxis_dodgeableA -= speed_dodgeableA;
                    break;
                default:
                    break;
            }
            dodgeableA.setLocation(xAxis_dodgeableA, yAxis_dodgeableA);
        }if(duration <= 20){
            if(dodgeableB.getLocation().x < -50){
                instantiate_dodgeableB();
            }else if(dodgeableB.getLocation().x > 395){
                instantiate_dodgeableB();
            }
            if(dodgeableB.getLocation().y < -15){
                instantiate_dodgeableB();
            }else if(dodgeableB.getLocation().y > 340){
                instantiate_dodgeableB();
            }
            switch (random_dodgeableB) {
                case 0:
                    xAxis_dodgeableB += speed_dodgeableB;
                    break;
                case 1:
                    xAxis_dodgeableB -= speed_dodgeableB;
                    break;
                case 2:
                    yAxis_dodgeableB += speed_dodgeableB;
                    break;
                case 3:
                    yAxis_dodgeableB -= speed_dodgeableB;
                    break;
                default:
                    break;
            }
            dodgeableB.setLocation(xAxis_dodgeableB, yAxis_dodgeableB);
        }if(duration <= 15){
            if(dodgeableC.getLocation().x < -50){
                instantiate_dodgeableC();
            }else if(dodgeableC.getLocation().x > 395){
                instantiate_dodgeableC();
            }
            if(dodgeableC.getLocation().y < -15){
                instantiate_dodgeableC();
            }else if(dodgeableC.getLocation().y > 340){
                instantiate_dodgeableC();
            }
            switch (random_dodgeableC) {
                case 0:
                    xAxis_dodgeableC += speed_dodgeableC;
                    break;
                case 1:
                    xAxis_dodgeableC -= speed_dodgeableC;
                    break;
                case 2:
                    yAxis_dodgeableC += speed_dodgeableC;
                    break;
                case 3:
                    yAxis_dodgeableC -= speed_dodgeableC;
                    break;
                default:
                    break;
            }
            dodgeableC.setLocation(xAxis_dodgeableC, yAxis_dodgeableC);
        }if(duration <= 10){
            if(dodgeableD.getLocation().x < -50){
                instantiate_dodgeableD();
            }else if(dodgeableD.getLocation().x > 395){
                instantiate_dodgeableD();
            }
            if(dodgeableD.getLocation().y < -15){
                instantiate_dodgeableD();
            }else if(dodgeableD.getLocation().y > 340){
                instantiate_dodgeableD();
            }
            switch (random_dodgeableD) {
                case 0:
                    xAxis_dodgeableD += speed_dodgeableD;
                    break;
                case 1:
                    xAxis_dodgeableD -= speed_dodgeableD;
                    break;
                case 2:
                    yAxis_dodgeableD += speed_dodgeableD;
                    break;
                case 3:
                    yAxis_dodgeableD -= speed_dodgeableD;
                    break;
                default:
                    break;
            }
            dodgeableD.setLocation(xAxis_dodgeableD, yAxis_dodgeableD);
        }
    }
    private void clickableAMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickableAMousePressed
        xAxis_clickableA = ThreadLocalRandom.current().nextInt(50, 350); 
        yAxis_clickableA = ThreadLocalRandom.current().nextInt(50, 285);
        if(clickableA.isEnabled() == true){
            switch (evt.getButton()) {
                case 1:
                    if(clickableA.getBackground() == enemyLMB){
                        scoreAtCurrent += 100;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                        
                    }else{
                        scoreAtCurrent -= deduct_clickable;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                    }   scoreAtCurrentLabel.setText("Current Score: "+scoreAtCurrent);
                    break;
                case 2:
                    if(clickableA.getBackground() == enemyMMB){
                        scoreAtCurrent += 100;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                        
                    }else{
                        scoreAtCurrent -= deduct_clickable;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                    }   scoreAtCurrentLabel.setText("Current Score: "+scoreAtCurrent);
                    break;
                case 3:
                    if(clickableA.getBackground() == enemyRMB){
                        scoreAtCurrent += 100;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                        
                    }else{
                        scoreAtCurrent -= deduct_clickable;
                        clickableA.setLocation(xAxis_clickableA, yAxis_clickableA);
                    }   scoreAtCurrentLabel.setText("Current Score: "+scoreAtCurrent);
                    break;
                default:
                    break;
            }
            colorRandom();
        }
    }//GEN-LAST:event_clickableAMousePressed

    private void newStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStartActionPerformed
        gameStart();
        timerA = new Timer();
        timerA.schedule(new TimerTask() {
            @Override
            public void run() {
                timerALabel.setText(String.valueOf("Time left (seconds): "+duration/10+""+duration%10));
                if(play == true){
                    duration--;
                    enemyClickableState(play);
                }else if(play == false){
                    enemyClickableState(play);
                }
                if(duration == 0){
                    gameOver();
                }
            }
        }, 0, 1_000);
        timerB = new Timer();
        timerB.schedule(new TimerTask() {
            @Override
            public void run() {
                if(play == true){
                    dodge();
                }
                if(duration == 0){
                    timerB.cancel();
                }
            }
        }, 0, 100);
    }//GEN-LAST:event_newStartActionPerformed
    
    private void togglePauseGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePauseGameActionPerformed
        // TODO add your handling code here:
        gameState();
    }//GEN-LAST:event_togglePauseGameActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyMMB = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("mmb "+enemyMMBColor, "mmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    enemyMMBColor = tmp;
                } catch (IOException e) {
                }
            }else{
            }
        }catch(HeadlessException | FileNotFoundException | NumberFormatException e){
            
        }
        cosmeticInitialize();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void GameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GameActionPerformed

    private void CosmeticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CosmeticActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CosmeticActionPerformed

    private void ScoreboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScoreboardActionPerformed
        // TODO add your handling code here:
        scoreboardInitialization();
        model.setDataVector(datasetA,column);
        table.setModel(model);
        JOptionPane.showMessageDialog(null, pane);
    }//GEN-LAST:event_ScoreboardActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyLMB = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("lmb "+enemyLMBColor, "lmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    enemyLMBColor = tmp;
                } catch (IOException e) {
                }
            }else{
            }
        }catch(HeadlessException | FileNotFoundException | NumberFormatException e){
            
        }
        cosmeticInitialize();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyRMB = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("rmb "+enemyRMBColor, "rmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    enemyRMBColor = tmp;
                } catch (IOException e) {
                }
            }else{
            }
        }catch(HeadlessException | FileNotFoundException | NumberFormatException e){
            
        }
        cosmeticInitialize();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void b1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b1MousePressed

    private void b2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b2MousePressed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_b1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        String
            introGame = "Welcome to our hypercasual game, where you simply click and dodge enemies to gain score\n",
            sectionAGame = "In current view, you'll see top-bar, where Game/Cosmetic/Help this each have inner options that able differs to game \n",
            sectionBGame = "At top left just below the top-bar, a display of Current Score, Highest Score, & Current Player Name \n",
            sectionCGame = "At bottom left, a display of Enemies with say on how to deal with them, fail to do so, on: clickable deducts a score of "+deduct_clickable+" as for dodge, a score of "+deduct_dodgeable+"\n",
            startGame = "Those said, to Start a Game Click on Tab \"Game\" and select \"New\"  \n",
            toggleGame = "- To toggle Pause/Play over the current Game, Click on Tab \"Game\" and select \"Pause/Play\" \n",
            refreshGame = "- To restore to default display, Click on Tab \"Game\" and select \"Refresh\"  \n",
            scoreboardGame = "- To view scoreboard, click on Tab \"Game\" and select \"Scoreboard\"";
            
        JOptionPane.showMessageDialog(null, introGame+sectionAGame+sectionBGame+sectionCGame+startGame+toggleGame+refreshGame+scoreboardGame);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void b3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b3MousePressed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        try{
            tmp = JOptionPane.showInputDialog("Name Please?");
            read = new Scanner(cosmetic);
            if(tmp.length()>0){
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("name "+name, "name "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    name = tmp;
                } catch (IOException e) {
                }
            }
        }catch(HeadlessException | FileNotFoundException | NumberFormatException e){
            
        }
        cosmeticInitialize();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void dodgeableAMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeableAMouseEntered
        if(play == true){
            scoreAtCurrent -= deduct_dodgeable;
            gameUpdate();
        }
    }//GEN-LAST:event_dodgeableAMouseEntered

    private void dodgeableBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeableBMouseEntered
        if(play == true){
            scoreAtCurrent -= deduct_dodgeable;
            gameUpdate();
        }
    }//GEN-LAST:event_dodgeableBMouseEntered

    private void dodgeableCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeableCMouseEntered
        if(play == true){
            scoreAtCurrent -= deduct_dodgeable;
            gameUpdate();
        }
    }//GEN-LAST:event_dodgeableCMouseEntered

    private void dodgeableDMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeableDMouseEntered
        if(play == true){
            scoreAtCurrent -= deduct_dodgeable;
            gameUpdate();
        }
    }//GEN-LAST:event_dodgeableDMouseEntered

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        gameReset();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        restore();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if(stateA==true){
            gameGuide(false);
            stateA = false;
        }else if(stateA==false){
            gameGuide(true);
            stateA = true;
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabAims().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Cosmetic;
    private javax.swing.JMenu Game;
    private javax.swing.JMenuItem Scoreboard;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton clickableA;
    private javax.swing.JLabel dodgeableA;
    private javax.swing.JLabel dodgeableB;
    private javax.swing.JLabel dodgeableC;
    private javax.swing.JLabel dodgeableD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JLabel l4;
    private javax.swing.JLabel l5;
    private javax.swing.JLabel l6;
    private javax.swing.JLabel l7;
    private javax.swing.JLabel l8;
    private javax.swing.JLabel l9;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JLabel playerNameLabel;
    private javax.swing.JLabel scoreAtCurrentLabel;
    private javax.swing.JLabel scoreAtHighestLabel;
    private javax.swing.JLabel timerALabel;
    private javax.swing.JMenuItem togglePauseGame;
    // End of variables declaration//GEN-END:variables
}
