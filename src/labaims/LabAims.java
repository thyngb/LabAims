/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labaims;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ncoba
 */
public class LabAims extends javax.swing.JFrame {
    String 
        name = "annonymous",
        dodge = "dodge me!", 
            
        pattern = "YYYYMMddHHmm",
        date,
            
        colorLMB,
        colorMMB,
        colorRMB,
            
        content = "",
        tmp = "",
    
        path;
    
    int
        deduct_dodge = 50,
        deduct_button = 1000,
            
        duration=30,
            
        scoreCurrent = 0, 
        scoreHighest = 0,
            
        xAxis_b1, 
        yAxis_b1,
        random,
            
        xAxis_dodgeA, 
        yAxis_dodgeA,
        speed_dodgeA,
        random_dodgeA,
            
        xAxis_dodgeB, 
        yAxis_dodgeB,
        speed_dodgeB,
        random_dodgeB,
            
        xAxis_dodgeC, 
        yAxis_dodgeC,
        speed_dodgeC,
        random_dodgeC,
            
        xAxis_dodgeD, 
        yAxis_dodgeD,
        speed_dodgeD,
        random_dodgeD;
    
    boolean 
        pause = true, 
        start = false;
    
    Scanner 
        read;
    
    BufferedWriter 
        write;
    
    Timer 
        t1, 
        t2;
    
    SimpleDateFormat 
        simpleDateFormat = new SimpleDateFormat(pattern);
    
    Path 
        currentRelativePath = Paths.get("");
    
    File 
        directory = new File(path = currentRelativePath.toAbsolutePath().toString()+"/bin/"),
            
        scoreboard = new File(path+"scoreboard.txt"),
            
        cosmetic = new File(path+"cosmetic.txt");
    
    String[] 
        scanned;
    
    Object[][] 
        datasetA;
    
    Object[] 
        column;
    
    Object 
        A, 
        B;
    
    Pattern 
        p = Pattern.compile("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
    
    Matcher 
        m;
    
    Color
        enemyA = Color.decode(colorLMB = "#FF0000"),
        enemyB = Color.decode(colorMMB = "#00FFFF"),
        enemyC = Color.decode(colorRMB = "#FFC0CB");
    
    DefaultTableModel 
        model = new DefaultTableModel();
    
    JTable 
        table = new JTable(model);
    
    JScrollPane 
        pane = new JScrollPane(table);
    
    public LabAims() {
        initComponents();
        
        setLayout(null);
        
        directory.mkdirs();
        try {
            cosmetic.createNewFile();
            scoreboard.createNewFile();
            read = new Scanner(scoreboard);
        } catch (IOException ex) {
        }
        
        column = new Object[]{"score", "player", "data"};
        
        refreshGUI();
        
        model.setRowCount(0);
        model.setDataVector(datasetA,column);
        
        setTitle("LabAims");
        setSize(400, 400);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b1 = new javax.swing.JButton();
        l1 = new javax.swing.JLabel();
        l2 = new javax.swing.JLabel();
        l3 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        l5 = new javax.swing.JLabel();
        l6 = new javax.swing.JLabel();
        b4 = new javax.swing.JButton();
        l7 = new javax.swing.JLabel();
        l8 = new javax.swing.JLabel();
        dodgeA = new javax.swing.JLabel();
        dodgeB = new javax.swing.JLabel();
        dodgeC = new javax.swing.JLabel();
        l11 = new javax.swing.JLabel();
        l12 = new javax.swing.JLabel();
        dodgeD = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Game = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        togglePauseGame = new javax.swing.JMenuItem();
        refreshGame = new javax.swing.JMenuItem();
        Scoreboard = new javax.swing.JMenuItem();
        Cosmetic = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(400, 400));

        b1.setText("jButton1");
        b1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b1MousePressed(evt);
            }
        });

        l1.setText("Current Score:");

        l2.setText("Highest Score:");

        l3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l3.setText("Time left (seconds): 30");

        l4.setText("left-click enemies:");
        l4.setMaximumSize(new java.awt.Dimension(150, 16));
        l4.setMinimumSize(new java.awt.Dimension(150, 16));
        l4.setPreferredSize(new java.awt.Dimension(150, 16));

        b2.setFocusable(false);
        b2.setMaximumSize(new java.awt.Dimension(15, 15));
        b2.setMinimumSize(new java.awt.Dimension(15, 15));
        b2.setPreferredSize(new java.awt.Dimension(15, 15));
        b2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b2MousePressed(evt);
            }
        });
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setFocusable(false);
        b3.setMaximumSize(new java.awt.Dimension(15, 15));
        b3.setMinimumSize(new java.awt.Dimension(15, 15));
        b3.setPreferredSize(new java.awt.Dimension(15, 15));
        b3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b3MousePressed(evt);
            }
        });

        l5.setText("middle-click enemies:");
        l5.setMaximumSize(new java.awt.Dimension(150, 16));
        l5.setMinimumSize(new java.awt.Dimension(150, 16));
        l5.setPreferredSize(new java.awt.Dimension(150, 16));

        l6.setText("right-click enemies:");
        l6.setMaximumSize(new java.awt.Dimension(150, 16));
        l6.setMinimumSize(new java.awt.Dimension(150, 16));
        l6.setPreferredSize(new java.awt.Dimension(150, 16));

        b4.setFocusable(false);
        b4.setMaximumSize(new java.awt.Dimension(15, 15));
        b4.setMinimumSize(new java.awt.Dimension(15, 15));
        b4.setPreferredSize(new java.awt.Dimension(15, 15));
        b4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                b4MousePressed(evt);
            }
        });

        l7.setText("Name:");

        l8.setText("\"\"");

        dodgeA.setText("dodge me!");
        dodgeA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeAMouseEntered(evt);
            }
        });

        dodgeB.setText("dodge me!");
        dodgeB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeBMouseEntered(evt);
            }
        });

        dodgeC.setText("dodge me!");
        dodgeC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeCMouseEntered(evt);
            }
        });

        l11.setText("dodge enemies:");
        l11.setMaximumSize(new java.awt.Dimension(150, 16));
        l11.setMinimumSize(new java.awt.Dimension(150, 16));
        l11.setPreferredSize(new java.awt.Dimension(150, 16));

        l12.setText("\"\"");
        l12.setMaximumSize(new java.awt.Dimension(150, 16));
        l12.setMinimumSize(new java.awt.Dimension(150, 16));
        l12.setPreferredSize(new java.awt.Dimension(150, 16));

        dodgeD.setText("dodge me!");
        dodgeD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dodgeDMouseEntered(evt);
            }
        });

        Game.setText("Game");
        Game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GameActionPerformed(evt);
            }
        });

        newGame.setText("New");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStartActionPerformed(evt);
            }
        });
        Game.add(newGame);

        togglePauseGame.setText("Pause/Play");
        togglePauseGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePauseGameActionPerformed(evt);
            }
        });
        Game.add(togglePauseGame);

        refreshGame.setText("Refresh");
        refreshGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshGameActionPerformed(evt);
            }
        });
        Game.add(refreshGame);

        Scoreboard.setText("Scoreboard");
        Scoreboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScoreboardActionPerformed(evt);
            }
        });
        Game.add(Scoreboard);

        jMenuBar1.add(Game);

        Cosmetic.setText("Cosmetic");
        Cosmetic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CosmeticActionPerformed(evt);
            }
        });

        jMenuItem11.setText("Reset");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem11);

        jMenuItem4.setText("Set Left Click Enemy's Color");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem4);

        jMenuItem5.setText("Set Middle Click Enemy's Color");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem5);

        jMenuItem6.setText("Set Right Click Enemy's Color");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem6);

        jMenuItem9.setText("Set Dodge Enemy's Label");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem9);

        jMenuItem8.setText("Set Player's Name");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        Cosmetic.add(jMenuItem8);

        jMenuBar1.add(Cosmetic);

        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });

        jMenuItem7.setText("Guide");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        Help.add(jMenuItem7);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(l3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(l7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(l8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(l11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(l12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 115, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dodgeB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(190, 190, 190))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dodgeA)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dodgeD)
                    .addComponent(dodgeC))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l2)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l7)
                    .addComponent(l8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(l3)
                .addGap(27, 27, 27)
                .addComponent(dodgeA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodgeB))
                .addGap(18, 18, 18)
                .addComponent(dodgeC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dodgeD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        l6.getAccessibleContext().setAccessibleName("right-click enemies");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void updateGUI(){
        if(scoreCurrent != 0) l1.setText("Current Score: "+scoreCurrent); 
        if(scoreHighest != 0) l2.setText("Highest Score: "+scoreHighest); 
    }
    
    private void refreshGUI(){
        GameOver();
        cosmeticState();
        scoreBoard();
        
        l8.setText(name);
        
        dodgeA.setLocation(-50, -15);
        dodgeA.setText(dodge);
        
        dodgeB.setLocation(-50, -15);
        dodgeB.setText(dodge);
        
        dodgeC.setLocation(-50, -15);
        dodgeC.setText(dodge);
        
        dodgeD.setLocation(-50, -15);
        dodgeD.setText(dodge);
        
        l12.setText(dodge);
        
        b2.setBackground(enemyA);
        b3.setBackground(enemyB);
        b4.setBackground(enemyC);
        
        b2.setFocusable(false);
        b3.setFocusable(false);
        b4.setFocusable(false);
        
        l3.setText("Time left (seconds): 30");
        
        b1.setLocation(195, 135);
        b1.setEnabled(false);
        
        l1.setText("Current Score: "+scoreCurrent); 
        if(scoreHighest != 0) l2.setText("Highest Score: "+scoreHighest); 
    }
    
    private void scoreBoard(){
        model.setRowCount(0);
        scanned = null;
        int x = 0, y = 0;
        try {
            scoreboard.createNewFile();
        } catch (IOException ex) {
        }
        try {
            read = new Scanner(scoreboard);
            for(x = 0; read.hasNextLine(); x++){
                x = x;
                scanned = read.nextLine().split(" ");
                y = scanned.length;
            }
        } catch (Exception e) {
        }
        datasetA = new Object[x][y];
        
        try {
            read = new Scanner(scoreboard);
            for(x = 0; read.hasNextLine(); x++){
                try{
                    scanned = read.nextLine().split(" ");
                    for(y = 0; y < scanned.length; y++){
                        datasetA[x][y] = scanned[y];
                    }
                }catch(Exception e){
                    
                }
            }
        } catch (Exception e) {
        }
        scoreSort();
    }
    
    private void scoreSort() {
        Arrays.sort(datasetA, new Comparator<Object[]>() {
            @Override
            public int compare(Object[] a, Object[] b) {
                A = a[0];
                if(A.equals("")) A=0;
                B = b[0];
                if(B.equals("")) B=0;
                return Integer.compare(Integer.valueOf(B.toString()), Integer.valueOf(A.toString()));
            }
        });
        try{
            scoreHighest = Integer.valueOf(datasetA[0][0].toString());
            updateGUI();
        }catch(Exception e){
            l2.setText("Highest Score: ");
        }
    }
    
    private void instantiate_dodgeA(){
        random_dodgeA = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeA == 0||random_dodgeA == 1){
            yAxis_dodgeA = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeA == 0){
                xAxis_dodgeA = -50;
            }else if(random_dodgeA == 1){
                xAxis_dodgeA = 395;
            }
        }else if(random_dodgeA == 2||random_dodgeA == 3){
            xAxis_dodgeA = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeA == 2){
                yAxis_dodgeA = -15;
            }else if(random_dodgeA == 3){
                yAxis_dodgeA = 340;
            }
        }
        speed_dodgeA = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeB(){
        random_dodgeB = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeB == 0||random_dodgeB == 1){
            yAxis_dodgeB = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeB == 0){
                xAxis_dodgeB = -50;
            }else if(random_dodgeB == 1){
                xAxis_dodgeB = 395;
            }
        }else if(random_dodgeB == 2||random_dodgeB == 3){
            xAxis_dodgeB = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeB == 2){
                yAxis_dodgeB = -15;
            }else if(random_dodgeB == 3){
                yAxis_dodgeB = 340;
            }
        }
        speed_dodgeB = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeC(){
        random_dodgeC = ThreadLocalRandom.current().nextInt(0, 4); 
        if(random_dodgeC == 0||random_dodgeC == 1){
            yAxis_dodgeC = ThreadLocalRandom.current().nextInt(0, 325);
            if(random_dodgeC == 0){
                xAxis_dodgeC = -50;
            }else if(random_dodgeC == 1){
                xAxis_dodgeC = 395;
            }
        }else if(random_dodgeC == 2||random_dodgeC == 3){
            xAxis_dodgeC = ThreadLocalRandom.current().nextInt(0, 345);
            if(random_dodgeC == 2){
                yAxis_dodgeC = -15;
            }else if(random_dodgeC == 3){
                yAxis_dodgeC = 340;
            }
        }
        speed_dodgeC = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void instantiate_dodgeD(){
	random_dodgeD = ThreadLocalRandom.current().nextInt(0, 4); 
	if(random_dodgeD == 0||random_dodgeD == 1){
		yAxis_dodgeD = ThreadLocalRandom.current().nextInt(0, 325);
		if(random_dodgeD == 0){
			xAxis_dodgeD = -50;
		}else if(random_dodgeD == 1){
			xAxis_dodgeD = 395;
		}
	}else if(random_dodgeD == 2||random_dodgeD == 3){
		xAxis_dodgeD = ThreadLocalRandom.current().nextInt(0, 345);
		if(random_dodgeD == 2){
			yAxis_dodgeD = -15;
		}else if(random_dodgeD == 3){
			yAxis_dodgeD = 340;
		}
	}
	speed_dodgeD = ThreadLocalRandom.current().nextInt(5, 16);
    }
    private void dodge(){
        if(duration < 30){
            if(dodgeA.getLocation().x < -50){
            instantiate_dodgeA();
            }else if(dodgeA.getLocation().x > 395){
                instantiate_dodgeA();
            }
            if(dodgeA.getLocation().y < -15){
                instantiate_dodgeA();
            }else if(dodgeA.getLocation().y > 340){
                instantiate_dodgeA();
            }
            if(random_dodgeA == 0){
                xAxis_dodgeA += speed_dodgeA;
            }else if(random_dodgeA == 1){
                xAxis_dodgeA -= speed_dodgeA;
            }else if(random_dodgeA == 2){
                yAxis_dodgeA += speed_dodgeA;
            }else if(random_dodgeA == 3){
                yAxis_dodgeA -= speed_dodgeA;
            }
            dodgeA.setLocation(xAxis_dodgeA, yAxis_dodgeA);
        }
        
        if(duration < 20){
            if(dodgeB.getLocation().x < -50){
            instantiate_dodgeB();
            }else if(dodgeB.getLocation().x > 395){
                instantiate_dodgeB();
            }
            if(dodgeB.getLocation().y < -15){
                instantiate_dodgeB();
            }else if(dodgeB.getLocation().y > 340){
                instantiate_dodgeB();
            }
            if(random_dodgeB == 0){
                xAxis_dodgeB += speed_dodgeB;
            }else if(random_dodgeB == 1){
                xAxis_dodgeB -= speed_dodgeB;
            }else if(random_dodgeB == 2){
                yAxis_dodgeB += speed_dodgeB;
            }else if(random_dodgeB == 3){
                yAxis_dodgeB -= speed_dodgeB;
            }
            dodgeB.setLocation(xAxis_dodgeB, yAxis_dodgeB);
        }
        
        if(duration < 10){
            if(dodgeC.getLocation().x < -50){
            instantiate_dodgeC();
            }else if(dodgeC.getLocation().x > 395){
                instantiate_dodgeC();
            }
            if(dodgeC.getLocation().y < -15){
                instantiate_dodgeC();
            }else if(dodgeC.getLocation().y > 340){
                instantiate_dodgeC();
            }
            if(random_dodgeC == 0){
                xAxis_dodgeC += speed_dodgeC;
            }else if(random_dodgeC == 1){
                xAxis_dodgeC -= speed_dodgeC;
            }else if(random_dodgeC == 2){
                yAxis_dodgeC += speed_dodgeC;
            }else if(random_dodgeC == 3){
                yAxis_dodgeC -= speed_dodgeC;
            }
            dodgeC.setLocation(xAxis_dodgeC, yAxis_dodgeC);
        }
        
        if(duration < 5){
            if(dodgeD.getLocation().x < -50){
            instantiate_dodgeD();
            }else if(dodgeD.getLocation().x > 395){
                instantiate_dodgeD();
            }
            if(dodgeD.getLocation().y < -15){
                instantiate_dodgeD();
            }else if(dodgeD.getLocation().y > 340){
                instantiate_dodgeD();
            }
            if(random_dodgeD == 0){
                xAxis_dodgeD += speed_dodgeD;
            }else if(random_dodgeD == 1){
                xAxis_dodgeD -= speed_dodgeD;
            }else if(random_dodgeD == 2){
                yAxis_dodgeD += speed_dodgeD;
            }else if(random_dodgeD == 3){
                yAxis_dodgeD -= speed_dodgeD;
            }
            dodgeD.setLocation(xAxis_dodgeD, yAxis_dodgeD);
        }
        
    }
    
    private void GameOver() {
        try {
            buttonState(false);
            pause = true;
            l3.setText("Times Up!");
            t1.cancel();
            t2.cancel();
            date = simpleDateFormat.format(new Date());
            write = new BufferedWriter(new FileWriter(scoreboard, true));
            if(scoreCurrent != 0){
                write.append("\n"+scoreCurrent+" "+name+" "+date);
                write.flush();
            }
        } catch (Exception e) {
        }
        scoreBoard();
    }
    
    public void cosmeticState(){
        try{
            read = new Scanner(cosmetic);
            if(read.hasNextLine()==false){
                write = new BufferedWriter(new FileWriter(cosmetic)); 
                write.write("lmb "+colorLMB+"\nmmb "+colorMMB+"\nrmb "+colorRMB+"\ndodge "+dodge+"\nname "+name);
                write.close();
            }else{
                read = new Scanner(cosmetic);
                while (read.hasNextLine()) {
                    String currLine = read.nextLine();
                    scanned = currLine.split(" ",2);
                    if(currLine.contains("lmb ")){
                        colorLMB = scanned[1];
                    }else if(currLine.contains("mmb ")){
                        colorMMB = scanned[1];
                    }else if(currLine.contains("rmb ")){
                        colorRMB = scanned[1];
                    }else if(currLine.contains("dodge ")){
                        dodge = scanned[1];
                    }else if(currLine.contains("name ")){
                        name = scanned[1];
                    }
                }
            }
        }catch(Exception e){
            
        }
        enemyA = Color.decode(colorLMB);
        enemyB = Color.decode(colorMMB);
        enemyC = Color.decode(colorRMB);
    }
    
    public void buttonState(boolean state){
        b1.setSelected(state);
        b1.setEnabled(state);
        b1.setFocusable(state);
    }
    
    private void colorRandom() {
        random = ThreadLocalRandom.current().nextInt(0, 3);  
        if(random == 0){
            b1.setBackground(enemyA);
        }else if(random == 1){
            b1.setBackground(enemyB);
        }else if(random == 2){
            b1.setBackground(enemyC);
        }
    }
    
    
    
    private void b1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b1MousePressed
        xAxis_b1 = ThreadLocalRandom.current().nextInt(50, 350); 
        yAxis_b1 = ThreadLocalRandom.current().nextInt(50, 285);
        
        if(b1.isEnabled() == true){
            if(evt.getButton()==1){         
                if(b1.getBackground() == enemyA){
                    scoreCurrent += 100;
                    b1.setLocation(xAxis_b1, yAxis_b1);

                }else{
                    scoreCurrent -= deduct_button;
                    b1.setLocation(xAxis_b1, yAxis_b1);
                }
                l1.setText("Current Score: "+scoreCurrent);
            }else if(evt.getButton()==2){         
                if(b1.getBackground() == enemyB){
                    scoreCurrent += 100;
                    b1.setLocation(xAxis_b1, yAxis_b1);

                }else{
                    scoreCurrent -= deduct_button;
                    b1.setLocation(xAxis_b1, yAxis_b1);
                }
                l1.setText("Current Score: "+scoreCurrent);
            }else if(evt.getButton()==3){         
                if(b1.getBackground() == enemyC){
                    scoreCurrent += 100;
                    b1.setLocation(xAxis_b1, yAxis_b1);

                }else{
                    scoreCurrent -= deduct_button;
                    b1.setLocation(xAxis_b1, yAxis_b1);
                }
                l1.setText("Current Score: "+scoreCurrent);
            }
            colorRandom();
        }
    }//GEN-LAST:event_b1MousePressed

    private void newStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStartActionPerformed
        GameOver();
        scoreBoard();
        colorRandom();
        
        l1.setText("Current Score: ");
        scoreCurrent = 0;
        pause = false;
        b1.setEnabled(true);
        
        try{
            t1.cancel();
        }
        catch(Exception ex){
            
        }
        b1.setLocation(xAxis_b1 = 195, yAxis_b1 = 135);
        t1 = new Timer();
        duration = 30;
        t1.schedule(new TimerTask() {
            @Override
            public void run() {
                l3.setText(String.valueOf("Time left (seconds): "+duration/10+""+duration%10));
                if(pause == false){
                    duration--; 
                }
                if(duration == 0){
                    GameOver();
                }
            }
        }, 0, 1_000);
        
        try{
            t2.cancel();
        }
        catch(Exception ex){
            
        }
        instantiate_dodgeA();
        instantiate_dodgeB();
        instantiate_dodgeC();
        instantiate_dodgeD();
        
        t2 = new Timer();
        t2.schedule(new TimerTask() {
            @Override
            public void run() {
                if(pause == false){
                    dodge();
                }
                if(duration == 0){
                    t2.cancel();
                }
            }
        }, 0, 100);
    }//GEN-LAST:event_newStartActionPerformed
    
    private void togglePauseGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePauseGameActionPerformed
        // TODO add your handling code here:
        if(pause == true){
            pause = false;
            buttonState(true);
            
        }else if(pause == false){
            pause = true;
            buttonState(false);
        }
    }//GEN-LAST:event_togglePauseGameActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyB = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("mmb "+colorMMB, "mmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    colorMMB = tmp;
                } catch (Exception e) {
                }
            }else{
            }
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void GameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GameActionPerformed

    private void CosmeticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CosmeticActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CosmeticActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_HelpActionPerformed

    private void ScoreboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScoreboardActionPerformed
        // TODO add your handling code here:
        scoreBoard();
        model.setDataVector(datasetA,column);
        table.setModel(model);
        JOptionPane.showMessageDialog(null, pane);
    }//GEN-LAST:event_ScoreboardActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyA = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("lmb "+colorLMB, "lmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    colorLMB = tmp;
                } catch (Exception e) {
                }
            }else{
            }
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try{
            tmp = JOptionPane.showInputDialog("What Hex Code Color? (Example: #00FFFF)");
            m = p.matcher(tmp);
            read = new Scanner(cosmetic);
            if(m.matches()){
                enemyC = Color.decode(tmp);
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("rmb "+colorRMB, "rmb "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    colorRMB = tmp;
                } catch (Exception e) {
                }
            }else{
            }
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void b2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b2MousePressed

    private void b3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b3MousePressed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_b2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        String
            introGame = "Welcome to our hypercasual game, where you simply click and dodge enemies to gain score\n",
            sectionAGame = "In current view, you'll see top-bar, where Game/Cosmetic/Help this each have inner options that able differs to game \n",
            sectionBGame = "At top left just below the top-bar, a display of Current Score, Highest Score, & Current Player Name \n",
            sectionCGame = "At bottom left, a display of Enemies with say on how to deal with them, fail to do so, on: clickable deducts a score of "+deduct_button+" as for dodge, a score of "+deduct_dodge+"\n",
            startGame = "Those said, to Start a Game Click on Tab \"Game\" and select \"New\"  \n",
            toggleGame = "- To toggle Pause/Play over the current Game, Click on Tab \"Game\" and select \"Pause/Play\" \n",
            refreshGame = "- To restore to default display, Click on Tab \"Game\" and select \"Refresh\"  \n",
            scoreboardGame = "- To view scoreboard, click on Tab \"Game\" and select \"Scoreboard\"";
            
        JOptionPane.showMessageDialog(null, introGame+sectionAGame+sectionBGame+sectionCGame+startGame+toggleGame+refreshGame+scoreboardGame);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void b4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_b4MousePressed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        try{
            tmp = JOptionPane.showInputDialog("Name Please?");
            read = new Scanner(cosmetic);
            if(tmp.length()>0){
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("name "+name, "name "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    name = tmp;
                } catch (Exception e) {
                }
            }
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void dodgeAMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeAMouseEntered
        if(pause == false){
            scoreCurrent -= deduct_dodge;
            updateGUI();
        }
    }//GEN-LAST:event_dodgeAMouseEntered

    private void dodgeBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeBMouseEntered
        // TODO add your handling code here:
        if(pause == false){
            scoreCurrent -= deduct_dodge;
            updateGUI();
        }
    }//GEN-LAST:event_dodgeBMouseEntered

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        try{
            tmp = JOptionPane.showInputDialog("Label Please?");
            read = new Scanner(cosmetic);
            if(tmp.length()>5){
                while (read.hasNextLine()) {
                    content = content.concat(read.nextLine() + "\n");
                }
                try{
                    content = content.replaceAll("dodge "+dodge, "dodge "+tmp);
                    write = new BufferedWriter(new FileWriter(cosmetic));
                    write.write(content);
                    write.close();
                    dodge = tmp;
                } catch (Exception e) {
                }
            }else{
                JOptionPane.showMessageDialog(null,"More than 5 characters, PLEZ");
            }
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void dodgeCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeCMouseEntered
        // TODO add your handling code here:
        if(pause == false){
            scoreCurrent -= deduct_dodge;
            updateGUI();
        }
    }//GEN-LAST:event_dodgeCMouseEntered

    private void refreshGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshGameActionPerformed
        refreshGUI();
    }//GEN-LAST:event_refreshGameActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        colorLMB = "#FF0000";
        colorMMB = "#00FFFF";
        colorRMB = "#FFC0CB";
        name = "annonymous!";
        dodge = "dodge me!";
        try{
            write = new BufferedWriter(new FileWriter(cosmetic)); 
            write.write("lmb "+colorLMB+"\nmmb "+colorMMB+"\nrmb "+colorRMB+"\ndodge "+dodge+"\nname "+name);
            write.close();
        }catch(Exception e){
            
        }
        cosmeticState();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void dodgeDMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dodgeDMouseEntered
        if(pause == false){
            scoreCurrent -= deduct_dodge;
            updateGUI();
        }
    }//GEN-LAST:event_dodgeDMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabAims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabAims().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Cosmetic;
    private javax.swing.JMenu Game;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Scoreboard;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JLabel dodgeA;
    private javax.swing.JLabel dodgeB;
    private javax.swing.JLabel dodgeC;
    private javax.swing.JLabel dodgeD;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l11;
    private javax.swing.JLabel l12;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JLabel l5;
    private javax.swing.JLabel l6;
    private javax.swing.JLabel l7;
    private javax.swing.JLabel l8;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JMenuItem refreshGame;
    private javax.swing.JMenuItem togglePauseGame;
    // End of variables declaration//GEN-END:variables
}
